/*
배열(array): 메모리의 연속 공간에 값이 채워져 있는 형태의 자료구조. 인덱스를 통해 참조 가능하며, 선언한 자료형의 값만 저장 가능
특징
1) 인덱스를 사용하여 값에 바로 접근 가능
2) 새로운 값을 삽입하거나 특정 인덱스에 있는 값을 삭제하기 어렵다. 값을 삽입하거나 삭제하려면 해당 인덱스 주변에 있는 값을 이동시키는 과정이 필요
3) 배열의 크기는 선언할 때 지정 가능하며 한번 선언하면 크기를 늘리거나 줄일 수 없다.
4) 구조가 간단하므로 코딩테스트에서 많이 사용

리스트(list): 값과 포인터를 묶은 노드라는 것을 포인터로 연결한 자료구조(값+포인터)
특징
1) 인덱스가 없으므로 값에 접근하려면 head부터 순서대로 접근
2) 포인터로 연결되어있어 데이터의 삽입, 삭제 연산 속도가 빠름
3) 선언시 크기 지정하지 않아도 ok. 리스트의 크기는 정해져 있지 않고, 크기가 변하기 쉬운 데이터를 다룰 때 적절
4) 포인터를 저장할 공간이 필요하므로 배열보다 구조가 복잡

*백터(vector): c++ stdlib에 있는 자료구조 컨테이너. 배열의 특징을 가지면서 단점을 보완한 동적 배열의 형태
특징
1) 동적으로 원소 추가 가능. 즉, 크기가 자동으로 늘어난다.
2) 맨 마지막 위치에 데이터를 삽입하거나 삭제할 때는 문제가 없으나 중간의 삽입, 삭제는 배열과 같은 매커니즘을 갖는다
3) 배열과 마찬가지로 인덱스로 각 데이터에 직접 접근 가능
*/
#include<iostream>
#include<vector>
int main(){
    std::vector<int> A;
    A.push_back(10);
    A.push_back(30);
    A.push_back(5);
    A.push_back(8);
    A.push_back(6); 
    A.push_back(1);

    A.insert(A.begin(),7);  // A.begin: 제일 앞
    A.insert(A.begin()+2,10);   // 맨앞 + 2

    A[4]=-5;
    A.pop_back();           // 맨 뒤 값 삭제 및 출력
    A.erase(A.begin()+3);   // 특정 위치의 값 삭제

    std::cout<<A.size()<<'\n';  // vector 크기
    std::cout<<A.front()<<'\n'; // 제일 앞의 값
    std::cout<<A.back()<<'\n';  // 제일 뒤의 값
    std::cout<<A[3]<<'\n';      // index 3 위치의 값
    std::cout<<A.at(5)<<'\n';   // index 5 위치의 값
    A.clear();              // 모든 값 삭제
}